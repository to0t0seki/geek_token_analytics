import src.data_access.client as db_client

def create_daily_balances_table() -> None:
    """日次残高テーブルを作成する"""
    create_table_query = """
    CREATE TABLE IF NOT EXISTS adjusted_daily_balances_copy (
        date TEXT,
        address TEXT,
        balance REAL,
        PRIMARY KEY (date, address)
    )
    """
    client = db_client.DatabaseClient()
    client.execute_ddl(create_table_query)

    create_index_query = """
    CREATE INDEX IF NOT EXISTS idx_daily_balances_address 
    ON adjusted_daily_balances_copy(address);
    """
    client.execute_ddl(create_index_query)


def calculate_daily_balances() -> None:
    query = """
    WITH adjusted_transactions AS (
        SELECT
            DATE(datetime(transactions.timestamp, '+5 hours')) AS date,
            transfer_details.from_address AS address,
            -CAST(transfer_details.value AS NUMERIC) AS balance_change
        FROM transactions join transfer_details on transactions.tx_hash = transfer_details.tx_hash
        WHERE transfer_details.from_address IS NOT NULL

        UNION ALL

        SELECT
            DATE(datetime(transactions.timestamp, '+5 hours')) AS date,
            transfer_details.to_address AS address,
            CAST(transfer_details.value AS NUMERIC) AS balance_change
        FROM transactions join transfer_details on transactions.tx_hash = transfer_details.tx_hash
        WHERE transfer_details.to_address IS NOT NULL
    ),
    aggregated_balances AS (
        SELECT
            date,
            address,
            SUM(balance_change) AS balance
        FROM adjusted_transactions
        GROUP BY date, address
    )
    INSERT OR REPLACE INTO adjusted_daily_balances_copy (date, address, balance)
    SELECT
        date,
        address,
        SUM(balance) OVER (PARTITION BY address ORDER BY date) AS balance
    FROM aggregated_balances
    ORDER BY date, address;
    """
    client = db_client.DatabaseClient()
    client.execute(query)

def test_db():
    client = db_client.DatabaseClient()
    data = client.query_to_df("SELECT * FROM adjusted_daily_balances_copy")
    print(data)

def test1():
    client = db_client.DatabaseClient()
    query = """SELECT count(*) FROM geek_transactions
    where datetime(timestamp) > datetime('2024-09-26')
    """
    data = client.fetch_one(query)
    print(data)

    query2 = """SELECT count(*) FROM transfer_details left join transactions on transfer_details.tx_hash = transactions.tx_hash
    where datetime(transactions.timestamp) > datetime('2024-09-26')
    """
    data2 = client.fetch_one(query2)
    print(data2)
    
# test1()

# def rename_table():
#     client = db_client.DatabaseClient()
#     client.execute_ddl("ALTER TABLE adjusted_daily_balances RENAME TO adjusted_daily_balances_old;")


# rename_table()
# create_daily_balances_table()
calculate_daily_balances()
# test_db()